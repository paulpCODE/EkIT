
---------------DemandCurve.h--------------- 
#pragma once
#include <iostream>
#include <vector>
#include <map>

class DemandCurve
{
	std::vector<std::pair<unsigned int, unsigned int>> pricesAndDemand;
	std::map<unsigned int, unsigned int> pricesAndCounters;

	void calculatePricesAndCounters(const std::vector<unsigned int>& maxPrices);
	void calculateDemand();

	DemandCurve(const DemandCurve&) = delete;
	const DemandCurve& operator = (const DemandCurve&) = delete;
public:
	DemandCurve(const std::vector<unsigned int>& maxPrices);

	friend std::ostream& operator << (std::ostream& os, const DemandCurve& dc);
};
---------------DemandCurve.cpp--------------- 
#include "DemandCurve.h"

void DemandCurve::calculatePricesAndCounters(const std::vector<unsigned int>& maxPrices)
{
	for (auto maxPrice : maxPrices) {
		if (pricesAndCounters.find(maxPrice) == pricesAndCounters.end()) {
			pricesAndCounters.insert(std::make_pair(maxPrice, 1));
		}
		else {
			pricesAndCounters.at(maxPrice)++;
		}
	}
}

void DemandCurve::calculateDemand()
{
	unsigned int demand = 0;
	for (auto it = --pricesAndCounters.end(); it != --pricesAndCounters.begin(); it--) {
		demand += it->second;
		pricesAndDemand.push_back(std::make_pair(it->first, demand));
	}
}

DemandCurve::DemandCurve(const std::vector<unsigned int>& maxPrices) {
	calculatePricesAndCounters(maxPrices);
	calculateDemand();
}

std::ostream& operator << (std::ostream& os, const DemandCurve& dc) {
	os << "Price:" << std::endl;
	for (auto& el : dc.pricesAndDemand) {
		os << el.first << std::endl;
	}
	os << "Demand:" << std::endl;
	for (auto& el : dc.pricesAndDemand) {
		os << el.second << std::endl;
	}
	return os;
}

---------------File.h--------------- 
#pragma once
#include <iostream>
#include <fstream>
#include <string>

namespace Files {

	class oFile : public std::ofstream
	{
		oFile(const oFile&) = delete;
		const oFile& operator = (const oFile& of) = delete;

	public:
		oFile(const std::string& path) : std::ofstream(path) {
			if (!is_open()) {
				std::cout << "FILE DOES NOT OPENED!";
				exit(0);
			}
		};
		~oFile() {
			close();
		};
	};

	//Input file
	/*class iFile : public std::ifstream
	{

		iFile(const iFile&) = delete;
		const iFile& operator = (const iFile& of) = delete;

	public:
		iFile(const std::string& path) : std::ifstream(path) {
			if (!is_open()) {
				std::cout << "FILE " + path + " DOES NOT OPENED!";
				exit(0);
			}
		};
		~iFile() {
			close();
		};

		const std::string readAll() {
			std::string data;
			char ch;
			while (!eof()) {
				ch = get();
				data += ch;
			}
			
			return data;
		}
	};*/


	template<class T>
	void writeToOutputTxt(const T& data) {
		oFile("output.txt") << data;
	}

}


---------------IndifferenceCurve.h--------------- 
#pragma once
#include <iostream>
#include <vector>

class IndifferenceCurve
{
public:
	class Good
	{
		const unsigned int m_price;
		const float m_value;
		const float m_deltaValue;

		const Good& operator = (const Good& g) = delete;
	public:
		Good(unsigned int price, float value, float deltaValue) : m_price(price), m_value(value), m_deltaValue(deltaValue) {}
		Good(const Good& g) : m_price(g.m_price), m_value(g.m_value), m_deltaValue(g.m_deltaValue) {}


		float valueForIndex(unsigned int index) const;
		unsigned int price() const;
	};

private:
	std::vector<std::pair<unsigned int, unsigned int>> points;

	const Good good1;
	const Good good2;
	const unsigned int budget;
	const float epsilon;
	
	const unsigned int maxGoods1;
	const unsigned int maxGoods2;

	IndifferenceCurve(const IndifferenceCurve&) = delete;
	const IndifferenceCurve& operator = (const IndifferenceCurve&) = delete;

	void valuesSums(std::vector<float>& out, const Good& good, const unsigned int maxGoods);
	void calculatePoints(const std::vector<float>& valuesSumsGood1, const std::vector<float>& valuesSumsGood2);
	void calculate();

public:
	IndifferenceCurve(unsigned int budget, Good& good1, Good& good2, float epsilon) :
		budget(budget), good1(good1), good2(good2), epsilon(epsilon), 
		maxGoods1(budget / good1.price()), maxGoods2(budget / good2.price()) {
		calculate();
	}

	std::vector<std::pair<unsigned int, unsigned int>>& getPoints();
	friend std::ostream& operator << (std::ostream& os, const IndifferenceCurve& c);
};

inline float IndifferenceCurve::Good::valueForIndex(unsigned int index) const
{
	float value = m_value - index * m_deltaValue;
	return value < 0 ? 0 : value;
}

inline unsigned int IndifferenceCurve::Good::price() const
{
	return m_price;
}

inline std::vector<std::pair<unsigned int, unsigned int>>& IndifferenceCurve::getPoints() {
	return points;
}



---------------IndifferenceCurve.cpp--------------- 
#include "IndifferenceCurve.h"

void IndifferenceCurve::valuesSums(std::vector<float>& out, const Good& good, const unsigned int maxGoods)
{
    out.push_back(good.valueForIndex(0));
    for (int i = 1; i < maxGoods; i++) {
        out.push_back(out.back() + good.valueForIndex(i));
    }
}

void IndifferenceCurve::calculatePoints(const std::vector<float>& valuesSumsGood1, const std::vector<float>& valuesSumsGood2)
{
    float staticValue = 0.f;
    if (valuesSumsGood1.back() > valuesSumsGood2.back()) {
        staticValue = valuesSumsGood2.back();
    }
    else {
        staticValue = valuesSumsGood1.back();
    }

    for (int i = 0; i < valuesSumsGood1.size() - 1; i++) {
        for (int j = 0; j < valuesSumsGood2.size() - 1; j++) {
            if (staticValue > valuesSumsGood1[i] + valuesSumsGood2[j] - epsilon && staticValue < valuesSumsGood1[i] + valuesSumsGood2[j] + epsilon) {
                points.push_back(std::make_pair(i, j));
            }
        }
    }
}

void IndifferenceCurve::calculate()
{
    std::vector<float> compilersValuesSums;
    std::vector<float> linkersValuesSums;

    valuesSums(compilersValuesSums, good1, maxGoods1);
    valuesSums(linkersValuesSums, good2, maxGoods2);

    calculatePoints(compilersValuesSums, linkersValuesSums);
}

std::ostream& operator<<(std::ostream& os, const IndifferenceCurve& c)
{
    os << "Budget Line maxGoods1;0 (x;y)" << std::endl 
        << c.maxGoods1 << ";0" << std::endl
        << "Budget Line 0;maxGoods2 (x;y)" << std::endl
        << "0;" << c.maxGoods2 << std::endl;
    os << "Indifference Curve Good1;Good2 (x;y)" << std::endl;
    for (auto& el : c.points) {
        os << el.first << ";" << el.second << std::endl;
    }
    return os;
}
